// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonelFollow.Core.Concrete.EntityFramework;

namespace PersonelFollow.WebUI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190211064011_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PersonelFollow.Entities.Concrete.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityName");

                    b.Property<DateTime>("ActivityRegisterDate");

                    b.Property<Guid>("UserId");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isNumeric");

                    b.HasKey("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("PersonelFollow.Entities.Concrete.ActivityFollow", b =>
                {
                    b.Property<int>("ActivityFollowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivityDate");

                    b.Property<int>("ActivityId");

                    b.Property<int>("NumberOfActivities");

                    b.Property<Guid?>("UserInformationUserId");

                    b.HasKey("ActivityFollowId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserInformationUserId");

                    b.ToTable("ActivityFollows");
                });

            modelBuilder.Entity("PersonelFollow.Entities.Concrete.UserInformation", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EMail");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.Property<DateTime>("UserRegisterDate");

                    b.Property<string>("UserSurname");

                    b.Property<bool>("isAdministrator");

                    b.HasKey("UserId");

                    b.ToTable("UserInformations");
                });

            modelBuilder.Entity("PersonelFollow.Entities.Concrete.Activity", b =>
                {
                    b.HasOne("PersonelFollow.Entities.Concrete.UserInformation", "UserInformation")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonelFollow.Entities.Concrete.ActivityFollow", b =>
                {
                    b.HasOne("PersonelFollow.Entities.Concrete.Activity", "Activity")
                        .WithMany("ActivityFollows")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PersonelFollow.Entities.Concrete.UserInformation")
                        .WithMany("ActivityFollows")
                        .HasForeignKey("UserInformationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
